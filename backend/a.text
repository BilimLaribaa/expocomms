import { useState, useEffect } from 'react';
import Grid from '@mui/material/Grid';
import { DashboardContent } from 'src/layouts/dashboard';
import {
  Alert as MuiAlert,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Snackbar,
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';

const rows = [
  {
    id: 1,
    username: 'Abdullah',
    age: 38,
    Roll: 'Developer',
  },
  {
    id: 2,
    username: 'Aslam',
    age: 25,
    Roll: 'Designer',
  },
];

type Contact = {
  id: number | null;
  first_name: string;
  middle_name: string;
  last_name: string;
  full_name: string;
  phone: string;
  alternate_phone: string;
  email: string;
  gender: string;
  date_of_birth: string;
  address: string;
  city: string;
  state: string;
  postal_code: string;
  country: string;
  contact_type: string;
  organization_name: string;
  job_title: string;
  department: string;
  website: string;
  linkedin: string;
  facebook: string;
  instagram: string;
  whatsapp: string;
  relationship: string;
  notes: string;
  is_favorite: boolean;
  is_active: boolean;
  created_at: string;
  updated_at: string;
};

export function OverviewAnalyticsView() {
  const [open, setOpen] = useState(false);
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [formData, setFormData] = useState<Contact>({
    id: null,
    full_name: '',
    first_name: '',
    email: '',
    phone: '',
    whatsapp: '',
    middle_name: '',
    last_name: '',
    alternate_phone: '',
    gender: '',
    date_of_birth: '',
    address: '',
    city: '',
    state: '',
    postal_code: '',
    country: '',
    contact_type: '',
    organization_name: '',
    job_title: '',
    department: '',
    website: '',
    linkedin: '',
    facebook: '',
    instagram: '',
    relationship: '',
    is_favorite: false,
    notes: '',
    is_active: true,
    created_at: '',
    updated_at: '',
  });

  const handleClickOpen = () => {
    setFormData({
      id: null,
      full_name: '',
      first_name: '',
      email: '',
      phone: '',
      whatsapp: '',
      middle_name: '',
      last_name: '',
      alternate_phone: '',
      gender: '',
      date_of_birth: '',
      address: '',
      city: '',
      state: '',
      postal_code: '',
      country: '',
      contact_type: '',
      organization_name: '',
      job_title: '',
      department: '',
      website: '',
      linkedin: '',
      facebook: '',
      instagram: '',
      relationship: '',
      is_favorite: false,
      notes: '',
      is_active: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    });
    setOpen(true);
  };

  const handleClose = () => setOpen(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  useEffect(() => {
    fetchContacts();
  }, []);

  const fetchContacts = () => {
    fetch('http://localhost:3001/api/contacts')
      .then((res) => res.json())
      .then((data) => setContacts(data))
      .catch((err) => console.error('Failed to fetch contacts:', err));
  };

  const handleOpen = (contact = null) => {
    setFormData(
      contact || {
        id: null,
        full_name: '',
        first_name: '',
        email: '',
        phone: '',
        whatsapp: '',
        middle_name: '',
        last_name: '',
        alternate_phone: '',
        gender: '',
        date_of_birth: '',
        address: '',
        city: '',
        state: '',
        postal_code: '',
        country: '',
        contact_type: '',
        organization_name: '',
        job_title: '',
        department: '',
        website: '',
        linkedin: '',
        facebook: '',
        instagram: '',
        relationship: '',
        is_favorite: false,
        notes: '',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }
    );
    setOpen(true);
  };

  const handleDelete = (id) => {
    fetch(`http://localhost:3001/api/contacts/${id}`, { method: 'DELETE' })
      .then(() => {
        setContacts((prev) => prev.filter((c) => c.id !== id));
        setSnackbar({ open: true, message: 'Contact deleted!', severity: 'success' });
      })
      .catch((err) => {
        console.error('Failed to delete contact:', err);
        setSnackbar({ open: true, message: 'Failed to delete contact', severity: 'error' });
      });
  };

  const handleSubmit = async () => {
    try {
      const method = formData.id ? 'PUT' : 'POST';
      const url = formData.id
        ? `http://localhost:3001/api/contacts/${formData.id}`
        : 'http://localhost:3001/api/contacts';

      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const resData = await res.json();

      if (!res.ok) throw new Error(resData.error || 'Failed to save contact');

      const msg = formData.id ? 'Contact updated!' : 'Contact added!';
      setSnackbar({ open: true, message: msg, severity: 'success' });
      handleClose();
      fetchContacts();
    } catch (err) {
      setSnackbar({ open: true, message: err.message, severity: 'error' });
    }
  };

  return (
    <DashboardContent maxWidth="xl">
      <Typography variant="h4" sx={{ mb: { xs: 3, md: 5 } }}>
        Contact Menu
      </Typography>
      <div style={{ height: 250, width: '100%' }}>
        <DataGrid
          columns={[{ field: 'username', hideable: false }, { field: 'age' }, { field: 'Roll' }]}
          rows={rows}
          showToolbar
        />
      </div>

      <Button variant="contained" color="primary" onClick={handleClickOpen} sx={{ mb: 2 }}>
        Create
      </Button>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={() => setSnackbar((prev) => ({ ...prev, open: false }))}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <MuiAlert
          onClose={() => setSnackbar((prev) => ({ ...prev, open: false }))}
          severity={snackbar.severity}
          elevation={6}
          variant="filled"
        >
          {snackbar.message}
        </MuiAlert>
      </Snackbar>

      {/* Dialog */}
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>{formData.id ? 'Edit Contact' : 'Add Contact'}</DialogTitle>
        <DialogContent sx={{ pt: 2 }}>
          <TextField
            margin="dense"
            name="first_name"
            label="First Name"
            fullWidth
            value={formData.first_name}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="middle_name"
            label="Middle Name"
            fullWidth
            value={formData.middle_name}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="last_name"
            label="Last Name"
            fullWidth
            value={formData.last_name}
            onChange={handleChange}
          />

          <TextField
            margin="dense"
            name="full_name"
            label="Full Name"
            fullWidth
            value={formData.full_name}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="phone"
            label="Mobile Number"
            fullWidth
            value={formData.phone}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="alternate_phone"
            label="Alternate Mobile Number"
            fullWidth
            value={formData.alternate_phone}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="email"
            label="Email"
            fullWidth
            value={formData.email}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="gender"
            label="Gender"
            fullWidth
            value={formData.gender}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="date_of_birth"
            label="Date of Birth"
            fullWidth
            value={formData.date_of_birth}
            onChange={handleChange}
          />

          <TextField
            margin="dense"
            name="address"
            label="Address"
            fullWidth
            value={formData.address}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="city"
            label="City"
            fullWidth
            value={formData.city}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="state"
            label="State"
            fullWidth
            value={formData.state}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="postal_code"
            label="Postal Code"
            fullWidth
            value={formData.postal_code}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="country"
            label="Country"
            fullWidth
            value={formData.country}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="contact_type"
            label="Contact Type"
            fullWidth
            value={formData.contact_type}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="organization_name"
            label="Organization Name"
            fullWidth
            value={formData.organization_name}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="job_title"
            label="Job Title"
            fullWidth
            value={formData.job_title}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="department"
            label="Department"
            fullWidth
            value={formData.department}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="website"
            label="Website"
            fullWidth
            value={formData.website}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="linkedin"
            label="LinkedIn Profile"
            fullWidth
            value={formData.linkedin}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="facebook"
            label="Facebook Profile"
            fullWidth
            value={formData.facebook}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="instagram"
            label="instagram Profile"
            fullWidth
            value={formData.instagram}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="whatsapp"
            label="WhatsApp Number"
            fullWidth
            value={formData.whatsapp}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="relationship"
            label="Relationship"
            fullWidth
            value={formData.relationship}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="notes"
            label="Notes"
            fullWidth
            value={formData.notes}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="is_favorite"
            label="Is Favorite"
            fullWidth
            value={formData.is_favorite ? 'Yes' : 'No'}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            name="is_active"
            label="Is Active"
            fullWidth
            value={formData.is_active ? 'Yes' : 'No'}
            onChange={handleChange}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleSubmit} variant="contained">
            {formData.id ? 'Update' : 'Add'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Table */}

      <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }} aria-label="contacts table">
          <TableHead>
            <TableRow>
              <TableCell>First Name</TableCell>
              <TableCell>Middle Name</TableCell>
              <TableCell>Last Name</TableCell>
              <TableCell>Full Name</TableCell>
              <TableCell>Mobile Number</TableCell>
              <TableCell>Alternate Mobile Number</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>Gender</TableCell>
              <TableCell>Date of Birth</TableCell>
              <TableCell>Address</TableCell>
              <TableCell>City</TableCell>
              <TableCell>State</TableCell>
              <TableCell>Postal Code</TableCell>
              <TableCell>Country</TableCell>
              <TableCell>Contact Type</TableCell>
              <TableCell>Organization Name</TableCell>
              <TableCell>Job Title</TableCell>
              <TableCell>Department</TableCell>
              <TableCell>Website</TableCell>
              <TableCell>LinkedIn Profile</TableCell>
              <TableCell>Facebook Profile</TableCell>
              <TableCell>Instagram Profile</TableCell>
              <TableCell>WhatsApp Number</TableCell>
              <TableCell>Relationship</TableCell>
              <TableCell>Notes</TableCell>
              <TableCell>Is Favorite</TableCell>
              <TableCell>Is Active</TableCell>
              <TableCell align="center">Created At</TableCell>
              <TableCell align="center">Updated At</TableCell>

              <TableCell align="center">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {contacts.map((contact) => (
              <TableRow key={contact.id}>
                <TableCell>{contact.first_name}</TableCell>
                <TableCell>{contact.middle_name}</TableCell>
                <TableCell>{contact.last_name}</TableCell>
                <TableCell>{contact.full_name}</TableCell>
                <TableCell>{contact.phone}</TableCell>
                <TableCell>{contact.alternate_phone}</TableCell>
                <TableCell>{contact.email}</TableCell>
                <TableCell>{contact.gender}</TableCell>
                <TableCell>{contact.date_of_birth}</TableCell>
                <TableCell>{contact.address}</TableCell>
                <TableCell>{contact.city}</TableCell>
                <TableCell>{contact.state}</TableCell>
                <TableCell>{contact.postal_code}</TableCell>
                <TableCell>{contact.country}</TableCell>
                <TableCell>{contact.contact_type}</TableCell>
                <TableCell>{contact.organization_name}</TableCell>
                <TableCell>{contact.job_title}</TableCell>
                <TableCell>{contact.department}</TableCell>
                <TableCell>{contact.website}</TableCell>
                <TableCell>{contact.linkedin}</TableCell>
                <TableCell>{contact.facebook}</TableCell>
                <TableCell>{contact.instagram}</TableCell>
                <TableCell>{contact.whatsapp}</TableCell>
                <TableCell>{contact.relationship}</TableCell>
                <TableCell>{contact.notes}</TableCell>
                <TableCell>{contact.is_favorite ? 'Yes' : 'No'}</TableCell>
                <TableCell>{contact.is_active ? 'Yes' : 'No'}</TableCell>
                <TableCell align="center">
                  {new Date(contact.created_at).toLocaleString()}
                </TableCell>
                <TableCell align="center">
                  {new Date(contact.updated_at).toLocaleString()}
                </TableCell>
                <TableCell align="center">
                  <Button onClick={() => handleOpen(contact)}>Edit</Button>
                  <Button onClick={() => handleDelete(contact.id)} color="error">
                    Delete
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </DashboardContent>
  );
}
